run = "npm run start"
language = "nodejs"
[R]
# 2) Replit Nix: Node 18
cat > replit.nix <<'N'
{ pkgs }: {
  deps = [ pkgs.nodejs-18_x pkgs.nodePackages.npm ];
}
N

# 3) package.json anpassen (Vite/CRA beides abdecken)
if grep -q '"vite' package.json; then
  # Vite: dev & preview auf $PORT/0.0.0.0
  npx json -I -f package.json -e '
    this.scripts=this.scripts||{};
    this.scripts.dev="vite --host 0.0.0.0 --port $PORT";
    this.scripts.preview="vite preview --host 0.0.0.0 --port $PORT";
    this.scripts.start=this.scripts.preview || "vite preview --host 0.0.0.0 --port $PORT";
  ' || true
  # vite.config.* absichern
  if [ ! -f vite.config.ts ] && [ ! -f vite.config.js ]; then
    cat > vite.config.js <<'V'
import { defineConfig } from 'vite'
export default defineConfig({
  server: { host: true, port: parseInt(process.env.PORT || '5173',10) },
  preview:{ host: true, port: parseInt(process.env.PORT || '5173',10) }
})
V
  fi
elif grep -q 'react-scripts build' package.json; then
  # Create React App: serve installieren & korrekt starten
  npm i -D serve >/dev/null 2>&1 || true
  npx json -I -f package.json -e '
    this.scripts=this.scripts||{};
    this.scripts.build=this.scripts.build||"react-scripts build";
    this.scripts.start="serve -s build -l $PORT";
  ' || true
else
  # Fallback: statisch – sofort starten mit http-server
  npm i -D http-server >/dev/null 2>&1 || true
  npx json -I -f package.json -e '
    this.scripts=this.scripts||{};
    this.scripts.start="http-server . -p $PORT --silent";
  ' || true
fi

# 4) Dependencies & Build (wenn vorhanden)
npm install
npm run -s build || true

echo "✅ Fix fertig. Klicke jetzt in Replit auf 'Run'."
